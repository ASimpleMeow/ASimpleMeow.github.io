{"version":3,"sources":["header.js","body.js","details.js","App.js","index.js"],"names":["Header","className","type","onClick","props","Component","Body","src","this","imageSrc","alt","Details","text","toLowerCase","split","map","word","charAt","toUpperCase","slice","join","detailsMap","details","Object","entries","forEach","item","detailTitle","String","replace","detailValue","toString","match","href","push","toTitleCase","showDetails","App","state","image","data","fetchData","fetch","then","res","json","cat","breed","name","description","origin","intelligence","life_span","temperament","wikipedia_link","wikipedia_url","id","fetchImages","index","length","url","handleOnClick","randomIndex","Math","floor","random","setState","ReactDOM","render","document","getElementById"],"mappings":"8MAwBeA,E,iLAdH,IAAD,OACP,OACE,yBAAKC,UAAU,2CACb,wBAAIA,UAAU,aAAd,oCACA,yBAAKA,UAAU,cACb,4BAAQC,KAAK,SAASD,UAAU,kBAAkBE,QAAS,kBAAM,EAAKC,MAAMD,YAA5E,c,GAVWE,aCcNC,E,iLARX,OACE,yBAAKL,UAAU,+CACb,yBAAKA,UAAU,oBAAoBM,IAAKC,KAAKJ,MAAMK,SAAUC,IAAI,U,GARtDL,aCoDJM,E,oLA7CDC,GACV,OAAOA,EACJC,cACAC,MAAM,KACNC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,MACtDC,KAAK,O,kCAQEC,GAAY,IAAD,OACfC,EAAU,GAWhB,OATAC,OAAOC,QAAQH,GAAYI,SAAQ,SAACC,GAClC,IAAIC,EAAcC,OAAOF,EAAK,IAAIG,QAAQ,IAAI,KAC1CC,EAAcF,OAAOF,EAAK,IAC1BI,EAAYC,WAAWC,MAAM,2HAC/BF,EAAc,uBAAGG,KAAMH,GAAT,iBAEhBR,EAAQY,KAAK,uBAAGjC,UAAU,aAAY,2BAAI,EAAKkC,YAAYR,IAA9C,KAAkEG,OAI/E,6BACGR,K,+BASL,OACE,yBAAKrB,UAAU,+CACb,wBAAIA,UAAU,QAAd,WACCO,KAAK4B,YAAY5B,KAAKJ,MAAMkB,c,GA9CfjB,aC+GPgC,E,YArGb,WAAYjC,GAAO,IAAD,8BAChB,4CAAMA,KACDkC,MAAQ,CACXC,MAAO,GACPjB,QAAS,GACTkB,KAAM,IALQ,E,iFAahBhC,KAAKiC,c,kCAOM,IAAD,OACVC,MAAM,uCACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACH,GACLA,EAAKf,SAAQ,SAACqB,GACZ,EAAKR,MAAME,KAAKN,KAAK,CACnBa,MAAOD,EAAIE,KACXC,YAAaH,EAAIG,YACjBC,OAAQJ,EAAII,OACZC,aAAcL,EAAIK,aAClBC,UAAWN,EAAIM,UACfC,YAAaP,EAAIO,YACjBC,eAAgBR,EAAIS,cACpBC,GAAIV,EAAIU,WAIbb,MAAK,WAAO,EAAKc,mB,oCAMR,IAAD,OACXjD,KAAK8B,MAAME,KAAKf,SAAQ,SAACqB,EAAKY,GAC5BhB,MAAM,wDAAwDI,EAAIU,IAC/Db,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACH,GACDA,GAAQA,EAAKmB,OAAS,EACxBb,EAAIP,MAAQC,EAAK,GAAGoB,IAAMpB,EAAK,GAAGoB,IAAM,uBAExCd,EAAIP,MAAQ,0BAGfI,MAAK,WACAe,GAAS,EAAKpB,MAAME,KAAKmB,OAAQ,GAAG,EAAKE,wB,sCAUnD,IAAIC,EAAcC,KAAKC,MAAMD,KAAKE,UAAYzD,KAAK8B,MAAME,KAAKmB,OAAO,IACjErB,EAAQ9B,KAAK8B,MAEbhB,EADOd,KAAK8B,MAAME,KAAKrB,QACR2C,GACnBxB,EAAMC,MAAQjB,EAAQiB,aAGfjB,EAAQiB,aACRjB,EAAQkC,GAEflB,EAAMhB,QAAUA,EAChBd,KAAK0D,SAAS5B,K,+BAMN,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CAAQnC,QAAS,kBAAM,EAAK0D,mBAC5B,yBAAK5D,UAAU,qBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,kBAAC,EAAD,CAAMQ,SAAUD,KAAK8B,MAAMC,SAE7B,yBAAKtC,UAAU,UACb,kBAAC,EAAD,CAASqB,QAASd,KAAK8B,MAAMhB,kB,GAlGzBjB,a,MCDlB8D,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.afd9da24.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\n/**\n * Class responsible for the header section of the application\n */\nclass Header extends Component {\n\n  /**\n   * Render the header section, pass on the onClick handler from the properties to the button DOM\n   */\n  render() {\n    return (\n      <div className=\"container mx-auto mt-5 p-4 container-bg\">\n        <h1 className=\"text-left\"> Welcome to the Random Cats App </h1>\n        <div className=\"text-right\">\n          <button type=\"button\" className=\"btn btn-primary\" onClick={() => this.props.onClick()}>\n            Next\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Header;","import React, {Component} from 'react';\n\n/**\n * Class responsible for the body section of the application (which will display the image)\n */\nclass Body extends Component {\n\n  /**\n   * Render the image passed through the properties.\n   */\n  render() {\n    return (\n      <div className=\"container container-bg mt-4 p-4 text-center\">\n        <img className=\"app-image rounded\" src={this.props.imageSrc} alt=\"\" />\n      </div>\n    );\n  }\n}\n\nexport default Body;","import React, {Component} from 'react';\n\n/**\n * Class responsible for details section of the application, showing the data about the image\n */\nclass Details extends Component{\n\n  /**\n   * Simple helper function to format text by capitalising the first letter of each word.\n   * @param text\n   * @returns {string}\n   */\n  toTitleCase(text){\n    return text\n      .toLowerCase()\n      .split(' ')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n  }\n\n  /**\n   * Parsing the details data into a title and it's value.\n   * @param detailsMap\n   * @returns List of DOM values for rendering\n   */\n  showDetails(detailsMap){\n    const details = []\n\n    Object.entries(detailsMap).forEach((item) => {\n      let detailTitle = String(item[0]).replace('_',' ');\n      let detailValue = String(item[1]);\n      if (detailValue.toString().match(/^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([-.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$/)){\n        detailValue = <a href={detailValue}> Click Here </a>\n      }\n      details.push(<p className=\"text-left\"><b>{this.toTitleCase(detailTitle)}</b>: {detailValue}</p>)\n    });\n\n    return (\n      <div>\n        {details}\n      </div>\n    )\n  }\n\n  /**\n   * Render the details data which is passed through by the properties.\n   */\n  render() {\n    return (\n      <div className=\"container container-bg mt-4 p-5 text-center\">\n        <h3 className=\"mb-4\">Details</h3>\n        {this.showDetails(this.props.details)}\n      </div>\n    );\n  }\n}\n\nexport default Details;\n","import React, {Component} from 'react';\nimport Header from './header.js';\nimport Body from './body';\nimport Details from \"./details\";\n\n\n/**\n * Main class of this web application.\n */\nclass App extends Component {\n\n  /**\n   * Constructor to set the initial state of this component\n   * @param props\n   */\n  constructor(props){\n    super(props);\n    this.state = {\n      image: \"\",\n      details: {},\n      data: [],\n    }\n  }\n\n  /**\n   * After the component is mounted successfully fetch the data from Rest API\n   */\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  /**\n   * Fetch all the remote data and store it in components state.\n   * Once all the data has been loaded successfully, call the onClick handler to present the data.\n   */\n  fetchData() {\n    fetch('https://api.thecatapi.com/v1/breeds')\n      .then(res => res.json())\n      .then((data) => {\n        data.forEach((cat) => {\n          this.state.data.push({\n            breed: cat.name,\n            description: cat.description,\n            origin: cat.origin,\n            intelligence: cat.intelligence,\n            life_span: cat.life_span,\n            temperament: cat.temperament,\n            wikipedia_link: cat.wikipedia_url,\n            id: cat.id,\n          });\n        });\n      })\n      .then(() => {this.fetchImages()});\n  }\n\n  /**\n   * Fetch all the images for the corresponding data.\n   */\n  fetchImages(){\n    this.state.data.forEach((cat, index) => {\n      fetch(\"https://api.thecatapi.com/v1/images/search?breed_ids=\"+cat.id)\n        .then(res => res.json())\n        .then((data) => {\n          if (data && data.length > 0){\n            cat.image = data[0].url ? data[0].url : '/images/no-image.png';\n          } else {\n            cat.image = '/images/no-image.png';\n          }\n        })\n        .then(() => {\n          if (index >= this.state.data.length -1) this.handleOnClick();\n        });\n    });\n  }\n\n  /**\n   * OnClick handler for the next button in the application.\n   * Generates a random index and uses that to select the data.\n   */\n  handleOnClick(){\n    let randomIndex = Math.floor(Math.random() * (this.state.data.length-1));\n    let state = this.state;\n    let data = this.state.data.slice();\n    let details = data[randomIndex];\n    state.image = details.image;\n\n    // Hiding the properties from the details we don't want to show\n    delete details.image;\n    delete details.id;\n\n    state.details = details;\n    this.setState(state);\n  }\n\n  /**\n   * Render function which will handle how the data is going to be shown.\n   */\n  render() {\n    return (\n      <div>\n        <Header onClick={() => this.handleOnClick()}/>\n        <div className=\"container mx-auto\">\n          <div className=\"row\">\n            <div className=\"col-sm\">\n              <Body imageSrc={this.state.image}/>\n            </div>\n            <div className=\"col-sm\">\n              <Details details={this.state.details}/>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\nimport './index.css';\n\n/**\n * Entry point into the application\n */\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}